require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe QuestionsController, type: :controller do
  include Devise::Test::ControllerHelpers

    before(:each) do
      sign_in(User.first)
    end

    context 'questions' do
      it "checks sanity of questions api" do
        question = Question.first
        answer = question.answers.order("rand()").first
        post :answer, params: {:format => 'json',:id => question.id,:answer_id => answer.id}
        expect(response.status).to eq 200
        resp_data = JSON.parse(response.body)
        expect(resp_data["success"]).to eq true
      end

      it "checks whether attempted question is again shown" do
        get :question ,params: {:format => 'json'}
        expect(response.status).to eq 200
        answered_questions = Question.joins("join answered_questions on answered_questions.question_id = questions.id and answered_questions.user_id = #{User.first.id} and answered_questions.answer_id is not NULL").pluck(:id)
        resp_data = JSON.parse(response.body)
        expect(answered_questions).not_to include(resp_data["id"])
      end
    end

    after(:each) do
      sign_out(User.first)
    end

end
